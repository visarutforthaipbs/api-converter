import React, { useState, useEffect, useRef } from "react";
import "./App.css";
import { fetchApiData, isValidUrl } from "./services/api";
import DataTable from "./components/DataTable";
import ApiEducation from "./components/ApiEducation";

// Determine if we're in production (Vercel) or development
const isProd = window.location.hostname !== "localhost";
const proxyPrefix = isProd ? "/api/" : "http://localhost:8080/";

function App() {
  // Reference to track initial proxy application
  const initialProxyApplied = useRef(false);

  // Update the URL to use a relative path when using the proxy setup
  // Set initial apiUrl state to use this example URL
  const [apiUrl, setApiUrl] = useState<string>(
    "https://epid-odpc2.ddc.moph.go.th/haze-r2/api/patient-group-location?limit=50000"
  );
  const [filename, setFilename] = useState<string>("my-cool-data");
  const [data, setData] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [showProxyHelp, setShowProxyHelp] = useState<boolean>(false);
  const [activeTab, setActiveTab] = useState<string>("converter");
  const [usingLocalProxy, setUsingLocalProxy] = useState<boolean>(isProd); // Auto enable proxy in production
  const [usingThaiProxy, setUsingThaiProxy] = useState<boolean>(false);

  // Effect to automatically add proxy in production
  useEffect(() => {
    // Only run once on component mount
    if (
      !initialProxyApplied.current &&
      isProd &&
      !apiUrl.includes(proxyPrefix)
    ) {
      initialProxyApplied.current = true; // Mark as applied

      // Apply proxy prefix automatically in production
      const cleanedUrl = cleanUrlFromProxies(apiUrl);
      const proxyUrl = `${proxyPrefix}${cleanedUrl}`;
      console.log("Auto-applying proxy in production:", proxyUrl);
      setApiUrl(proxyUrl);
    }
  }, [apiUrl]); // Only include apiUrl since proxyPrefix is a constant

  const handleFetchData = async () => {
    if (!apiUrl) {
      setError("‡πÉ‡∏™‡πà URL API ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏¥‡∏™‡∏™‡∏™~ ü•∫üëâüëà");
      return;
    }

    if (!isValidUrl(apiUrl)) {
      setError("URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏∞‡πÄ‡∏ï‡∏á ‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà URL ‡∏ô‡∏∞‡∏¢‡∏π‡πÇ‡∏ô‡πà‡∏ß‡∏ß üíÖ");
      return;
    }

    setIsLoading(true);
    setError(null);
    setShowProxyHelp(false);

    try {
      // Clean and validate the URL first
      let urlToFetch = cleanUrlFromProxies(apiUrl);

      console.log("Cleaned URL for fetching:", urlToFetch);

      // Pass a flag to indicate Thai proxy use if selected
      const options = {
        useThaiProxy: usingThaiProxy,
      };

      const result = await fetchApiData(urlToFetch, options);
      setData(Array.isArray(result) ? result : [result]);
      setError(null);

      // Reset Thai proxy flag after successful fetch
      setUsingThaiProxy(false);
    } catch (err: any) {
      console.error("Error fetching data:", err);

      // Add a special case for Thai proxy errors
      if (err.message?.includes("Thai proxy")) {
        setError(
          `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô Thai Proxy ‡πÑ‡∏î‡πâ: ${err.message}`
        );
      } else if (err.message?.includes("HTML")) {
        setError(
          "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö HTML ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ URL API ‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏ô‡∏∞ üßê"
        );
        setShowProxyHelp(true);
      } else if (err.message?.includes("CORS")) {
        setError(
          "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á CORS ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° '‡πÉ‡∏ä‡πâ Built-in Proxy üßô‚Äç‚ôÄÔ∏è' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
        setShowProxyHelp(true);
      } else if (err.message?.includes("Network Error")) {
        setError(
          "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Built-in Proxy ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏ô‡∏∞"
        );
        setShowProxyHelp(true);
      } else {
        setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"} üòµ`);
      }
      setData([]);

      // Reset Thai proxy flag after failed fetch
      setUsingThaiProxy(false);
    } finally {
      setIsLoading(false);
    }
  };

  const cleanUrlFromProxies = (url: string): string => {
    // Get URL without existing proxy prefixes if any
    let cleanUrl = url;
    const proxyPatterns = [
      "http://localhost:8080/",
      "/api/",
      "https://corsproxy.io/?",
      "https://cors-anywhere.herokuapp.com/",
      "https://api.allorigins.win/raw?url=",
      "https://proxy.cors.sh/",
    ];

    for (const pattern of proxyPatterns) {
      if (cleanUrl.includes(pattern)) {
        cleanUrl = cleanUrl.replace(pattern, "");
        if (pattern.includes("url=")) {
          // Handle URL parameter style proxies
          cleanUrl = decodeURIComponent(cleanUrl);
        }
        break;
      }
    }

    // Make sure the URL has a proper protocol
    if (!cleanUrl.startsWith("http://") && !cleanUrl.startsWith("https://")) {
      console.error("URL missing protocol after cleaning:", cleanUrl);
      // Default to https if no protocol
      cleanUrl = "https://" + cleanUrl;
    }

    // Fix malformed protocol (https:/ instead of https://)
    if (cleanUrl.match(/^https?:\/[^/]/)) {
      cleanUrl = cleanUrl.replace(/^(https?):\/([^/])/, "$1://$2");
    }

    // Fix specific path patterns we know about
    if (cleanUrl.includes("/haze-r2") && !cleanUrl.includes("/haze-r2/")) {
      cleanUrl = cleanUrl.replace("/haze-r2", "/haze-r2/");
    }

    console.log("Final cleaned URL:", cleanUrl);

    // Ensure the URL is properly formed
    try {
      new URL(cleanUrl);
    } catch (error) {
      console.error("Invalid URL after cleaning:", cleanUrl, error);
    }

    return cleanUrl;
  };

  const useLocalProxy = () => {
    try {
      // If already using the proxy, don't modify
      if (apiUrl.includes(`${proxyPrefix}`)) {
        return;
      }

      // Clean the URL first
      let cleanUrl = cleanUrlFromProxies(apiUrl);

      // Construct new URL with proxy
      const newUrl = `${proxyPrefix}${cleanUrl}`;
      console.log("Constructed proxy URL:", newUrl);

      setApiUrl(newUrl);
      setUsingLocalProxy(true);
    } catch (error) {
      console.error("Error setting up proxy URL:", error);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Proxy URL ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  };

  const useThaiProxy = () => {
    setUsingThaiProxy(true);
    console.log("Set to use Thai proxy for the next request");
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>
          ‚ú® ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡πà‡∏≤‡∏á <span className="highlight-text">API</span> ‚ú®
        </h1>
        <p>
          ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel, CSV ‡πÅ‡∏ö‡∏ö‡∏ä‡∏¥‡∏•‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏•‡∏¢‡∏≠‡πà‡∏∞!
        </p>
      </header>

      <div className="tab-container">
        <button
          className={`tab-button ${activeTab === "converter" ? "active" : ""}`}
          onClick={() => setActiveTab("converter")}
        >
          <span className="tab-icon">üîÑ</span> ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API
        </button>
        <button
          className={`tab-button ${activeTab === "education" ? "active" : ""}`}
          onClick={() => setActiveTab("education")}
        >
          <span className="tab-icon">üß†</span> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á API
        </button>
      </div>

      <main className="App-main">
        {activeTab === "converter" && (
          <>
            <div className="input-section">
              <div className="flex flex-col md:flex-row gap-2 mt-4">
                <input
                  type="text"
                  value={apiUrl}
                  onChange={(e) => setApiUrl(e.target.value)}
                  placeholder="API URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                  className="flex-1 p-2 border border-gray-300 rounded"
                />
                <button
                  onClick={handleFetchData}
                  disabled={isLoading}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded flex-shrink-0"
                >
                  {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." : "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                </button>
              </div>

              <div className="flex gap-2 mt-2">
                <button
                  onClick={useLocalProxy}
                  disabled={usingLocalProxy}
                  className={`text-sm py-1 px-2 rounded ${
                    usingLocalProxy
                      ? "bg-green-200 text-green-800"
                      : "bg-blue-200 text-blue-800 hover:bg-blue-300"
                  }`}
                >
                  {usingLocalProxy
                    ? "‚úì ‡πÉ‡∏ä‡πâ Built-in Proxy ‡∏≠‡∏¢‡∏π‡πà"
                    : "‡πÉ‡∏ä‡πâ Built-in Proxy üßô‚Äç‚ôÄÔ∏è"}
                </button>

                <button
                  onClick={useThaiProxy}
                  disabled={usingThaiProxy}
                  className={`text-sm py-1 px-2 rounded ${
                    usingThaiProxy
                      ? "bg-green-200 text-green-800"
                      : "bg-yellow-200 text-yellow-800 hover:bg-yellow-300"
                  }`}
                  title="‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Thai Proxy ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô - ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Proxy ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡∏´‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
                >
                  {usingThaiProxy
                    ? "‚úì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Thai Proxy"
                    : "‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Thai Multi-Proxy üáπüá≠"}
                </button>
              </div>

              <div className="input-group">
                <label htmlFor="filename">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:</label>
                <input
                  type="text"
                  id="filename"
                  value={filename}
                  onChange={(e) => setFilename(e.target.value)}
                  placeholder="‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ"
                  className="input-field"
                />
              </div>
            </div>

            {error && (
              <div className="error-message">
                <p>{error}</p>
                {showProxyHelp && (
                  <div className="proxy-help">
                    <p>
                      <strong>‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞‡∏ã‡∏¥‡∏™:</strong>
                    </p>
                    <ol>
                      <li>
                        {usingLocalProxy ? (
                          <span>
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ CORS Proxy ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
                            API URL ‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞
                          </span>
                        ) : (
                          <>
                            {isProd ? (
                              <span>
                                ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ CORS Proxy
                                ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:
                              </span>
                            ) : (
                              <>
                                ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° proxy ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡∏°‡∏¥‡∏ô‡∏≠‡∏•‡∏ô‡∏∞‡∏Ñ‡∏∞:
                                <pre>npm run proxy</pre>
                              </>
                            )}
                          </>
                        )}
                      </li>
                      <li>
                        ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Proxy:
                        <button
                          className="proxy-button"
                          onClick={useLocalProxy}
                        >
                          ‡πÉ‡∏ä‡πâ {isProd ? "Built-in" : "Local"} Proxy üßô‚Äç‚ôÄÔ∏è
                        </button>
                      </li>
                      <li>
                        ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô ‡∏•‡∏≠‡∏á‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏î‡∏π ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å
                        limit=50000 ‡πÄ‡∏õ‡πá‡∏ô limit=1000 ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÜ
                      </li>
                      <li>
                        ‡∏•‡∏≠‡∏á‡∏î‡∏π API ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö{" "}
                        <strong>"‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á API"</strong> ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏ô‡∏∞
                      </li>
                    </ol>
                  </div>
                )}
              </div>
            )}

            {data.length > 0 && (
              <div className="data-table-container">
                <DataTable data={data} filename={filename} />
              </div>
            )}
          </>
        )}

        {activeTab === "education" && <ApiEducation />}
      </main>
      <footer className="App-footer">
        <p>
          ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ô‡πâ‡∏≠‡∏á‡πÜ ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô |
          #‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏≠‡∏û‡∏µ‡πÑ‡∏≠‡πÑ‡∏°‡πà‡∏á‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå
        </p>
      </footer>
    </div>
  );
}

export default App;
